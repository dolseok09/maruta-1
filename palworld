#!/bin/bash

# 환경 변수 설정
USERNAME=$(whoami)
SERVICE_NAME="Palworld"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
VERSION="0.1.2"
INIT_FLAG_FILE="${HOME%/}/.script_init_done"
GITHUB_URL="https://raw.githubusercontent.com/kwakdolseok/maruta/main/palworld"

# 메시지 출력 함수
print_message() {
    echo -e "[\033[1;34m마루타 구동기\033[0m] $1"
}

# 서비스 파일 생성 함수
create_service_file() {
    [ -f "$SERVICE_FILE" ] && return

    sudo tee "$SERVICE_FILE" >/dev/null <<EOF
[Unit]
Description=Palworld Service
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=$USERNAME
Group=$USERNAME
WorkingDirectory=${HOME%/}/Steam/steamapps/common/PalServer
ExecStart=${HOME%/}/Steam/steamapps/common/PalServer/PalServer.sh -useperfthreads -NoAsyncLoadingThread -UseMultithreadForDS
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable $SERVICE_NAME
    print_message "$SERVICE_NAME 시스템에 구동기 등록이 완료되었습니다."
}

# 서비스 제어 함수
control_service() {
    case $1 in
        start|START|st|ST|시작)
            if [ "$(systemctl is-active $SERVICE_NAME)" = "active" ]; then
                print_message "현재 Palworld Server 서버가 이미 실행 중입니다. 추가 작업 없이 진행합니다."
            else
                if [ "$(systemctl is-enabled $SERVICE_NAME)" = "enabled" ]; then
                    print_message "Palworld Server 현재 실행 중이지 않습니다. 서비스를 시작합니다."
                else
                    print_message "Palworld Server 구동기가 활성화되어 있지 않습니다. 구동기를 활성화하고 시작합니다."
                    sudo systemctl enable $SERVICE_NAME
                fi
                sudo systemctl start $SERVICE_NAME
            fi
            ;;
        stop|STOP|sp|SP|정지)
            if systemctl is-active --quiet $SERVICE_NAME; then
                print_message "서버를 중지합니다..."
                sudo systemctl stop $SERVICE_NAME
                sleep 2  # 잠시 대기
                if systemctl is-active --quiet $SERVICE_NAME; then
                    print_message "서버가 정상적으로 종료되지 않았습니다."
                else
                    print_message "서버가 정상적으로 종료되었습니다."
                fi
            else
                print_message "서버는 이미 중지된 상태입니다."
            fi
            ;;
        *)
            echo "사용 가능한 명령어: start, stop"
            ;;
    esac
}

# 스크립트 업데이트 확인 및 실행
check_and_update_script() {
    [ "$1" = "noupdate" ] && return

    remote_version=$(wget -qO- "${GITHUB_URL}" | grep '^VERSION=' | head -1 | cut -d '"' -f 2)
    if [ "$VERSION" != "$remote_version" ]; then
        print_message "새 버전 $remote_version 발견. 업데이트를 진행하시겠습니까? (yes/y 또는 no/n)"
        read -r user_input
        if [[ $user_input =~ ^(yes|y|YES|Y)$ ]]; then
            print_message "업데이트 중..."
            wget -q -O ~/palworld "${GITHUB_URL}" && chmod +x ~/palworld
            exec ~/palworld noupdate
        else
            print_message "업데이트 취소."
        fi
    fi
}

# 초기 설정 함수
initialize_script() {
    create_service_file
    touch "$INIT_FLAG_FILE"
}

# 초기 설정 확인 및 실행
[ ! -f "$INIT_FLAG_FILE" ] && initialize_script

# 명령어 인자에 따른 서비스 제어
control_service "$1"
